{"version":3,"sources":["CalculateTime.js","glass-clink-1.mp3","bell-ring.mp3","App.js","index.js"],"names":["calculateTime","seconds","hours","Math","floor","minutes","Timer","useState","setSeconds","isActive","setIsActive","useSound","glassClink","volume","play","bell","playBell","timeArray","setTimeArray","stateRef","useRef","useEffect","interval","setInterval","current","clearInterval","className","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAgBiBA,MAhBjB,SAAwBC,GACpB,IAAIC,EAAQC,KAAKC,MAAMH,EAAU,MAC7BI,EAAUF,KAAKC,OAAOH,EAAmB,KAARC,GAAkB,IAOvD,OANAD,EAAUA,EAAmB,KAARC,EAA2B,GAAVG,EAMhC,CAJYH,EAAQ,GAAR,WAAiBA,GAASA,EACxBG,EAAU,GAAV,WAAmBA,GAAWA,EAC9BJ,EAAU,GAAV,WAAmBA,GAAYA,ICPxC,MAA0B,0CCA1B,MAA0B,sCCuH1BK,EA7GD,WAAO,IAAD,EAEYC,mBAAS,MAFrB,mBAEXN,EAFW,KAEFO,EAFE,OAGcD,oBAAS,GAHvB,mBAGXE,EAHW,KAGDC,EAHC,OAIHC,YAASC,EAAY,CAAEC,OAAQ,KAAvCC,EAJW,sBAKCH,YAASI,EAAM,CAAEF,OAAQ,KAArCG,EALW,sBAMgBT,mBAAS,IANzB,mBAMXU,EANW,KAMAC,EANA,KAOZC,EAAWC,mBA+DhB,OA5DAC,qBAAU,WACT,IAAIJ,EAAYjB,EAAcC,GAC9BiB,EAAaD,KACV,CAAChB,IAWJoB,qBAAU,WACPpB,EAAU,GAAKQ,GACjBK,MAEA,CAACL,IAOJY,qBAAU,WACR,IAAIC,EAAW,KAWf,OAVKb,EACHa,EAAWC,aAAY,WACrBf,GAAW,SAAAP,GAAO,OAAIA,EAAU,KAChB,IAAZA,GACFO,EAAWW,EAASK,WAErB,KACOf,GAAwB,IAAZR,GACtBwB,cAAcH,GAET,kBAAMG,cAAcH,MAC1B,CAACb,EAAUR,IAGdoB,qBAAU,WACK,IAAVpB,GAAeQ,GACjBO,MAEA,CAACP,EAAUR,IAgBZ,qBAAKyB,UAAU,MAAf,SAEG,sBAAKA,UAAU,UAAf,UAEG,6CACA,yCAEA,sBAAKA,UAAU,UAAf,UACI,wBAAQA,UAAU,gBAAgBC,QAjB9C,WACEnB,GAAW,SAAAP,GAAO,OAAIA,EAAU,MAChCkB,EAASK,QAAUvB,EAAU,IAenB,iBADJ,eAGI,wBAAQyB,UAAU,gBAAgBC,QAxB9C,WACEnB,GAAW,SAAAP,GAAO,OAAIA,EAAU,MAChCkB,EAASK,QAAUvB,EAAU,IAsBnB,oBAGJ,0BAASyB,UAAS,eAAUjB,EAAW,SAAS,YAAhD,UACM,kCAAKQ,EAAU,GAAf,OACA,qCACA,4BAAIA,EAAU,QAIpB,sBAAKS,UAAU,MAAf,UAEE,wBAAQA,UAAS,+CAA0CjB,EAAW,SAAW,YAAckB,QAAS,WA7EhHjB,GAAaD,GAeTA,GAAUK,KA8DN,SACKL,EAAW,QAAU,WAGxB,wBAAQiB,UAAU,aAAaC,QA9E3C,WACEnB,EAAW,MACXE,GAAY,IA4EF,4BCvGdkB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.55052e6b.chunk.js","sourcesContent":["function calculateTime (seconds) {\r\n    let hours = Math.floor(seconds / 3600);\r\n    let minutes = Math.floor((seconds - (hours * 3600 )) / 60 );\r\n    seconds = seconds - (hours * 3600) - (minutes * 60 );\r\n\r\n    let hoursFormat = hours < 10 ? `0${hours}`: hours;\r\n    let minutesFormat = minutes < 10 ? `0${minutes}`: minutes;\r\n    let secondsFormat = seconds < 10 ? `0${seconds}` : seconds;\r\n\r\n    return[\r\n      hoursFormat, \r\n      minutesFormat,\r\n      secondsFormat\r\n    ]\r\n  }\r\n\r\n  export default calculateTime;","export default __webpack_public_path__ + \"static/media/glass-clink-1.9caa9177.mp3\";","export default __webpack_public_path__ + \"static/media/bell-ring.57d5e004.mp3\";","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport useSound from 'use-sound';\nimport calculateTime from './CalculateTime';\nimport glassClink from './glass-clink-1.mp3';\nimport bell from './bell-ring.mp3';\n// src=\"https://www.soundjay.com/misc/sounds/bell-ringing-05.mp3\"\n\n\n\nconst Timer = () => {\n\n  const [seconds, setSeconds] = useState(1800);\n  const [isActive, setIsActive] = useState(false);\n  const [play] = useSound(glassClink, { volume: 0.1 });\n  const [playBell] = useSound(bell, { volume: 0.2 });\n  const [timeArray, setTimeArray] = useState([]);\n  const stateRef = useRef();\n\n\n   useEffect(() => {\n    let timeArray = calculateTime(seconds);\n    setTimeArray(timeArray);\n    }, [seconds]);\n\n  function toggle() {\n    setIsActive(!isActive);\n  }; \n\n  function reset() {\n    setSeconds(1800);\n    setIsActive(false);\n  };\n\n    useEffect(()=> {\n    if(seconds > 1 && isActive) {\n     play();\n    }    \n  }, [isActive]);\n\n  function dink () {\n    if(!isActive) play() \n  };\n\n   \n  useEffect(() => {\n    let interval = null;\n    if ( isActive ) {\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds - 1);\n        if (seconds === 0) {\n          setSeconds(stateRef.current)\n        }\n      }, 1000);\n    } else if (!isActive && seconds !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [isActive, seconds]);\n\n\n  useEffect(()=> {\n    if(seconds===1 && isActive) {\n     playBell();\n    }\n  }, [isActive, seconds]);\n\n  function plusMinutes () {\n    setSeconds(seconds => seconds + 60);\n    stateRef.current = seconds + 60;\n  }\n\n  function minusMinutes () {\n    setSeconds(seconds => seconds - 60);\n    stateRef.current = seconds - 60;\n  }\n\n\n\n \n   return (\n    <div className=\"app\">\n\n       <div className='wrapper'>      \n\n          <h1> C Y C L E </h1>\n          <h3> timer </h3>\n\n          <div className='session'> \n              <button className='changeMinutes' onClick={minusMinutes}> - </button>\n              SESSION TIME             \n              <button className='changeMinutes' onClick={plusMinutes}> + </button>              \n          </div>\n\n          <section className={`time-${isActive ? 'active':'inactive'}`}>\n                <p> {timeArray[1]} </p>\n                <span>:</span>\n                <p>{timeArray[2]}</p>\n          </section>      \n\n                  \n          <div className='row'>\n\n            <button className={`button button-primary button-primary-${isActive ? 'active' : 'inactive'}`} onClick={()=>{ toggle();  dink(); } }>\n                {isActive ? 'PAUSE' : 'START '}\n              </button>\n\n              <button className='button-res' onClick={reset}>\n                RESET\n              </button>\n\n          </div>\n\n      </div>\n    </div>\n  );\n};\n\n\nexport default Timer;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}